import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO
import "rendergraph.variant" for VAR_TYPE_VERTEX_ARRAY
import "brepvm" for BrepCode, BrepVM, BrepTools

class Compiler is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
			Pin(this, "va", VAR_TYPE_VERTEX_ARRAY),
		]

		this.layout()

		this.opcodes = nil		
	}

	calc_value(idx)
	{
		var num = 16

		var vm_list = []
		var reg_list = []
		for (var i in 0..num)
		{
			var opcodes = BrepCode.init()
			var reg = Compiler.calc_input_codes(opcodes, this, 0, i)
			opcodes.poly_to_vbuf(reg, reg)
			var vm = BrepVM.init(opcodes)

			vm_list.add(vm)
			reg_list.add(reg)
		}

		BrepTools.run_vm(vm_list)

//		for (var i in 0..num) {
//			vm_list[i].run()
//		}

		var vao_list = []
		for (var i in 0..num) {
			vao_list.add(vm_list[i].load(reg_list[i]))
		}
		var vao = BrepTools.build_vao(vao_list)
		return Variant(VAR_TYPE_VERTEX_ARRAY, vao)
	}

	compile_opcodes(thread)
	{
		this.opcodes = BrepCode.init()

		var reg = Compiler.calc_input_codes(this.opcodes, this, 0, thread)
		this.opcodes.poly_to_vbuf(reg, reg)
		return reg
	}

	static calc_input_codes(opcodes, curr_node, input_slot, thread)
	{
		var pin = Blueprint.query_pin(curr_node.imports, input_slot)
		if (!pin or pin.conns.isEmpty) {
			return -1
		}

		var f_pin = pin.conns.front().from
		var f_node = f_pin.node

		if (f_node.has_method("calc_opcodes(_,_,_)")) {
			return f_node.calc_opcodes(opcodes, f_pin.slot_idx, thread)
		}

		return -1
	}
}