import "blueprint.node" for Node
import "blueprint.pin" for Pin
import "blueprint.variant" for Variant
import "blueprint.blueprint" for Blueprint
import "geograph.variant" for VAR_TYPE_GEO, VarGeo
import "geograph.brush" for Brush
import "brepvm" for BrepCode, BrepVM

class Compiler is Node
{
	init()
	{
		super.init()

		this.imports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]
		this.exports = [
			Pin(this, "geo", VAR_TYPE_GEO),
		]

		this.layout()

		this.opcodes = nil
	}

	calc_value(idx)
	{
		//if (!this.opcodes) {
			var reg = this.compile_opcodes()
		//}

		if (!this.opcodes) {
			return nil
		}

		var vm = BrepVM.init(this.opcodes)
		vm.run()
		var ret = vm.load_register(reg)

		var geo = VarGeo()
		geo.shape = Brush([ ret ])
		return Variant(VAR_TYPE_GEO, geo)
	}

	compile_opcodes()
	{
		this.opcodes = BrepCode.init()

		return this.calc_input_codes(this, 0)
	}

	calc_input_codes(curr_node, input_slot)
	{
		var pin = Blueprint.query_pin(curr_node.imports, input_slot)
		if (!pin or pin.conns.isEmpty) {
			return -1
		}

		var f_pin = pin.conns.front().from
		var f_node = f_pin.node

		if (f_node.has_method("calc_opcodes(_,_)")) {
			return f_node.calc_opcodes(this.opcodes, f_pin.slot_idx)
		}

		return -1
	}
}